<!DOCTYPE html>
<html>
  <head>

  <META HTTP-EQUIV="content-type" CONTENT="text/html; charset=utf-8">
    <title><%= title %></title>
    <!-- CSS -->
    <link rel="stylesheet" href="/libs/bootstrap/dist/css/bootstrap.min.css">
    
    <link rel="stylesheet" href="/stylesheets/custom.css">
    <link rel="stylesheet" href="//rawgithub.com/Caged/d3-tip/master/examples/example-styles.css">
    <script src="//d3js.org/d3.v2.min.js" charset="utf-8"></script>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.6.2.min.js"></script> 
    <script type="text/javascript" src="/tipsy.js"></script>

    <style>


      @import url(/stylesheets/style.css?aea6f0a);
     .background {
          fill: #eee;
      }

      line {
          stroke: #fff;
      }

      text.active {
          fill: red;
      }
      rect.highlight {
          fill: none;
          stroke: red;
          stroke-width: 2;
      }
      .cell{
          fill:#004d8f !important;
      }
      .mtooltip {
          position: relative;
          display: inline-block;
          border-bottom: 1px dotted black;
      }

      .mtooltip .mtooltiptext {
          visibility: hidden;
          width: 120px;
          background-color: rgba(0,0,0,0.8);
          color: #fff;
          text-align: center;
          border-radius: 6px;
          padding: 5px 5px;
          position: absolute;
          z-index: 1;
          bottom: 100%;
          left: 50%;
          margin-left: -60px;
          
          /* Fade in tooltip - takes 1 second to go from 0% to 100% opac: */
          opacity: 0;
          transition: opacity 3s;
      }

      .mtooltip:hover .mtooltiptext {
          visibility: visible;
          opacity: 1;
      }
      

    </style>

  </head>
  <body>

  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="row">
          <div class="sidebar col-md-2">
            <form action="" method="post" class="mmargin-top" enctype="multipart/form-data">
              <p>Select file to upload:</p>
              <input type="file" name="fileToUpload" id="fileToUpload">
              <br>
              <input type="submit" class="btn btn-primary" value="Upload/Refresh" name="submit">
              </form>
              <br>
          </div>
          <div class="mainbar col-md-9">  
            <h3>Co-Occurrence Matrix</h3>
            <div id="graph">
              
            </div>
          </div>
        </div> 
      </div>
    </div>
  </div>
    <script>
    $(document).ready(function(){
      $(".sidebar").css('height', $(document).height());
    });
    
    /* implementation heavily influenced by http://bl.ocks.org/1166403 */

    nodes = <%- JSON.stringify(nodes) %>;
    graph = <%- JSON.stringify(graph) %>;

    var margin = {top: 80, right: 0, bottom: 10, left: 80},
    width = 880,
    height = 880;

    var x = d3.scale.ordinal().rangeBands([0, width]),
    z = d3.scale.linear().domain([0, 4]).clamp(true),
    c = d3.scale.category10().domain(d3.range(10));

    var svg = d3.select("#graph").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .style("margin-left", -margin.left + "px")
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append("rect")
        .attr("class", "background")
        .attr("width", width)
        .attr("height", height);

  for(var ab = 0; ab < 102; ab++ ){
    var matrix = [],
        nodes = nodes,
        n = nodes.length;

    // Compute index per node.
    nodes.forEach(function(node, i) {
      node.index = i;
      node.count = 0;
      matrix[i] = d3.range(n).map(function(j) {  return {x: j, y: i, z: 0}; });

    });
    // Convert links to matrix; count character occurrences.

    graph.forEach(function(link) {
      
      if(typeof matrix[link.source] != 'undefined' && typeof matrix[link.source][link.target] != 'undefined'){
        
        matrix[link.source][link.target].z += link.value;
        matrix[link.target][link.source].z += link.value;
        matrix[link.source][link.source].z += link.value;
        matrix[link.target][link.target].z += link.value;
        nodes[link.source].count += link.value;
        nodes[link.target].count += link.value;
      
      }
    
    });

    //Precompute the orders.
    var orders = {
      name: d3.range(n).sort(function(a, b) { return d3.ascending(nodes[a].name, nodes[b].name); }),
      count: d3.range(n).sort(function(a, b) { return nodes[b].count - nodes[a].count; })
    };

    // The default sort order.
    x.domain(orders.name);

    

    row = svg.selectAll(".row")
        .data(matrix)
      .enter().append("g")
        .attr("class", "row")
        .attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
        .each(row);

    row.append("line")
        .attr("x2", width);

    row.append("text")
        .attr("x", -6)
        .attr("y", x.rangeBand() / 2)
        .attr("dy", ".32em")
        .attr("text-anchor", "end")
        .text(function(d, i) { return nodes[i].name; });

    var column = svg.selectAll(".column")
        .data(matrix)
      .enter().append("g")
        .attr("class", "column")
        .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });

    column.append("line")
        .attr("x1", -width);

    column.append("text")
        .attr("x", 6)
        .attr("y", x.rangeBand() / 2)
        .attr("dy", ".32em")
        .attr("text-anchor", "start")
        .text(function(d, i) { return nodes[i].name; });

    function row(row) {
      var cell = d3.select(this).selectAll(".cell")
          .data(row.filter(function(d) { return d.z; }))
          .enter().append("rect")
          .attr("class", "cell")
          .attr("x", function(d) { return x(d.x); })
          .attr("width", x.rangeBand())
          .attr("height", x.rangeBand())
          .style("fill-opacity", function(d) { return z(d.z/100); })
          .style("fill", function(d) { return nodes[d.x].group == nodes[d.y].group ? c(nodes[d.x].group) : null; })
          .on("mouseover", mouseover)
          .on("mouseout", mouseout);
    }

    function mouseover(p) {
      d3.selectAll(".row text").classed("active", function(d, i) { return i == p.y; });
      d3.selectAll(".column text").classed("active", function(d, i) { return i == p.x; });
      
    }

    function mouseout() {
      d3.selectAll("text").classed("active", false);
       
    }

    $('.cell').tipsy({ 
      gravity: 'w', 
      html: true, 
      title: function() {
        var d = this.__data__;
        // console.log(d);
        // var x = d.xvalue;
        // var y = d.yvalue;
         return 'Matched value : ' + d.z; 
      }
    });

  }

  
  //console.log(matrix);

  </script>
  </body>
</html>
